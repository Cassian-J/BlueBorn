.dll -> 3 -> pouvoir / -> perso / -> score / -> option / -> map
un symbole de couleur différentes pour différecier les joueurs
clavier pour prendre les pseudos
chaque pouvoir a soit une durée soit un nombre d'utilistion
tir vers la ou le joueur regarde


[↑](#Table-of-Contents)


Calcul du Score
Score=((PV restants%+(|(degat mis×4) - degat subis|)×5)×(Handicap))×10
Handicap= 1+(Différence totale des stats/100)
Différence totale des stats = (-atk% - spd% - rspd%- fr% - hp% - pspd%)/5
les changements de stats peuvent aller de -25% a +25% soit un multiplicateur maximal de 150% et minimal de 50%

exemple de différence de stats:
maximal:
  atk  -50% -> + 10 %
  spd  -50% -> + 10 %
  rspd -50% -> + 10 %
  fr   -50% -> + 10 %
  hp   -50% -> + 10 %
multiplicateur de 150%
minimal:
  atk  +50% -> - 10 %
  spd  +50% -> - 10 %
  rspd +50% -> - 10 %
  fr   +50% -> - 10 %
  hp   +50% -> - 10 %
multiplicateur de 50% 

soit 50 point <=> 250% de stats de différences
soit  1 point <=> 5% de stats de différences

score maximal théorique si aucun soin n'est pris:
PV restants% = 100
degat mis = 163
degat subis = 0
Différence totale des stats = 50

Score=((100%+(|(163×4) - 0|)×5)×(1+(50/100)))×10=50400
Handicap= 1+(50/100)

score minimal théorique si aucun soin n'est pris :
PV restants% = 1
degat mis = 60
degat subis = 162
Différence totale des stats = -50

Score=((1%+(|(60×4) - 162|)×5)×(1+(-50/100)))×10=1930
Handicap= 1+(-50/100)



exemple:

partie entre 2 joueurs :
|joueur 1          ||joueur 2                   |
|------------------||---------------------------|
| tank |   stats   || fire rate dps |   stats   |
|------|-----------||---------------|-----------|
|  hp  |    130    ||  hp           |    100    |
| atk  |     10    || atk           |      8    |
| spd  |     80    || spd           |    100    |
| rspd |    100    || rspd          |    100    |
|  fr  |    0.6    ||  fr           |    1.4    |

changement des stats de chaque joueur :
|joueur 1          ||joueur 2                   |
|------------------||---------------------------|
| tank |   stats   || fire rate dps |   stats   |
|------|-----------||---------------|-----------|
|  hp  |   -25%    ||  hp           |    +0%    |
| atk  |   +10%    || atk           |    +5%    |
| spd  |   +10%    || spd           |   -10%    |
| rspd |    +0%    || rspd          |   -10%    |
|  fr  |   +20%    ||  fr           |   -10%    |
|  tot |   +15%    || tot           |   -25%    |

calcul de multiplicateur de différence de stats
joueur 1:
-(15-(-25))/5= -8 points
Différence totale des stats = -8
joueur 2:
-(-25-15)/5= 8 points
Différence totale des stats = 8

la partie dure 155 seconds
Le gagnant a 35% de c'est pv a la fin de la partie

calcul:
Score=((PV restants%+(|(degat mis×4) - degat subis|)×5)×(Handicap))×10
Handicap= 1+(Différence totale des stats/100)
PV restants% = 35
degat mis = 120
degat subis = 65
Handicap= 1+(Différence totale des stats/100)

si le joueur 1 gagne:

Différence totale des stats = -8

donc ScoreJoueur1 = ((35+(480-65)×5)×(1+(-8/100)))×10 = 19,412
donc si le joueur 1 gagne, il a un score de 19,412


si le joueur 2 gagne:

Différence totale des stats = -8

donc ScoreJoueur2 = ((35+(480-65)×5)×(1+(8/100)))×10 = 22,788
donc si le joueur 2 gagne, il a un score de 22,788


table dans la base de donnée:

score
perso avec leur changements
table pour enregistrer les joueur et leurs stats modifié


CREATE TABLE changement (
  uuid UUID PRIMARY KEY,  /////// id INTEGER PRIMARY KEY,
  Cuuid UUID FOREIGN KEY,  ////// Cid INTEGER FOREIGN KEY,
  pseudo TEXT,
  rspd INTEGER,
  spd INTEGER,
  hp INTEGER,
  atk INTEGER,
  fr INTEGER,
  pspd INTEGER
);

CREATE TABLE character (
  uuid UUID PRIMARY KEY,  /////// id INTEGER PRIMARY KEY,
  class TEXT,
  rspd INTEGER,
  spd INTEGER,
  hp INTEGER,
  atk INTEGER,
  fr FLOAT
);

CREATE TABLE score {
  uuid UUID PRIMARY KEY,  /////// id INTEGER PRIMARY KEY,
  pseudo TEXT,
  number INTEGER
}

ou peut etre que l'on va mettre des id normal a la place vu que c'est un jeu vidéo 
et que pas grave si les id des perso + changement sont pas sécurisé comme pour une base de donné de site web

base de donné legère vu qu'elle sera en local donc dans le style sqlite. pas besoin d'une place énorme




### Defense Weapons 🛡️
**Bulwark Shield** → A massive shield that blocks 30% of incoming damage and can reflect projectiles.(duration of use: ? | number of uses: ?)   
**Guardian Mace** → Heavy weapon that reduces damage taken by 15% while held.(duration of use: ? | number of uses: ?)   
**Fortress Blade** → A sword that grants a temporary shield absorbing 10% of max HP after every successful block.(duration of use: ? | number of uses: ?)   
**Aegis Spear** → When thrown, creates a defensive barrier that reduces incoming damage by 20% for 5 seconds.(duration of use: ? | number of uses: ?)   
**Titan Hammer** → Slamming the ground creates a shockwave that knocks enemies back and grants temporary armor.(duration of use: ? | number of uses: ?)  
## Speed Items ⚡
**Wind Boots** → Increases movement speed by 30% for ? seconds. (duration of use: ? | number of uses: ?)  
**Phantom Cloak** → Grants a brief burst of transparency and a 50% speed boost for ? seconds. (duration of use: ? | number of uses: ?)  
**Sonic Talisman** → Boosts movement speed by 70%, but disables attacking for ? seconds. (duration of use: ? | number of uses: ?)  
**Blink Pendant** → Allows instant teleportation up to 5 meters away. (duration of use: ? | number of uses: ?)  
**Storm Gauntlets** → Increases movement speed and attack speed by 20% for ? seconds. (duration of use: ? | number of uses: ?)  
## Attack Items ⚔️
**Doomblade** → Increases attack power by 30% for ? seconds. (duration of use: ? | number of uses: ?)  
**Executioner’s Charm** → Attacks apply Bleeding. (duration of use: ? | number of uses: ?)  
**Rage Pendant** → Increases attack power by 20% but reduces defense by 10% for ? seconds. (duration of use: ? | number of uses: ?)  
**Warrior’s Seal** → Heavy attacks deal bonus damage equal to 5% of the enemy’s missing HP. (duration of use: ? | number of uses: ?)  
## Fire Rate Items 🔫
**Rapidfire Gloves** → Increases attack speed by 50% for ? seconds. (duration of use: ? | number of uses: ?)  
**Machina Core** → Doubles attack speed but reduces accuracy by 10% for ? seconds. (duration of use: ? | number of uses: ?)  
**Havoc Trigger** → Each hit increases fire rate by 5% for ? seconds (stacks up to ? times). (duration of use: ? | number of uses: ?)  
**Stormfang Relic** → Allows shooting two projectiles per attack for ? seconds. (duration of use: ? | number of uses: ?)  
**Turbo Modulator** → Boosts ranged fire rate by 40% but increases reload time by 15% for ? seconds. (duration of use: ? | number of uses: ?)  
### Healing Weapons ❤️   
**Lifebinder Staff** → Successful attacks restore 2% of max HP (Cooldown: ? seconds).(duration of use: ? | number of uses: ?)   
**Blessed Hammer** → Healing aura activates when attacking, restoring 1% HP per second to allies nearby.(duration of use: ? | number of uses: ?)   
**Vitality Sword** → Killing an enemy heals the wielder for 5% of their max HP.(duration of use: ? | number of uses: ?)   
**Seraph’s Bow** → Arrows restore HP equal to 10% of the damage dealt.(duration of use: ? | number of uses: ?)   
**Phoenix Gauntlet** → When HP drops below 20%, the next attack heals for 30% HP (once per life).(duration of use: ? | number of uses: ?)   
### Buff Weapons ✨  
**Champion’s Lance** → Grants a +10% attack and defense boost for 5 seconds after a successful hit.(duration of use: ? | number of uses: ?)   
**Divine Staff** → Casts an aura that increases all allies' movement speed by 15% for ? seconds.(duration of use: ? | number of uses: ?)   
**Battle Cry Sword** → Striking an enemy increases the wielder’s attack and movement speed by 10% for ? seconds.(duration of use: ? | number of uses: ?)   
**Energy Infused Gauntlet** → Increases the wielder’s fire rate and attack power by 20% while attacking.(duration of use: ? | number of uses: ?)   
**Hero’s Greatsword** → Randomly grants a buff on each hit: Attack +20%, Speed +30%, or Defense +25% for ? seconds.(duration of use: ? | number of uses: ?)   












using UnityEngine;

[System.Serializable]
public class PlayerControls
{
    public KeyCode moveUp;
    public KeyCode moveDown;
    public KeyCode moveLeft;
    public KeyCode moveRight;
    public KeyCode fireNormal;
    public KeyCode fireSpecial;
}

public class Player : MonoBehaviour
{
    [Header("Player Settings")]
    public int playerID = 1; // 1 ou 2 pour différencier les joueurs

    [Header("Stats")]
    public float health = 100;
    public float attack = 10;
    public float speed = 100;
    public float rotationSpeed = 100;
    public float fireRate = 1;
    public float projectileSpeed = 10;

    [Header("Controls")]
    public PlayerControls controls;

    private float nextFireTime = 0f;
    public GameObject projectilePrefab;
    public Transform firePoint;

    private void Start()
    {
        LoadControls();
    }

    private void Update()
    {
        HandleMovement();
        HandleShooting();
    }

    public void LoadControls()
    {
        // Charger les contrôles personnalisés ou utiliser les valeurs par défaut
        if (PlayerPrefs.HasKey($"Player{playerID}_MoveUp"))
        {
            controls.moveUp = (KeyCode)System.Enum.Parse(typeof(KeyCode), PlayerPrefs.GetString($"Player{playerID}_MoveUp"));
            controls.moveDown = (KeyCode)System.Enum.Parse(typeof(KeyCode), PlayerPrefs.GetString($"Player{playerID}_MoveDown"));
            controls.moveLeft = (KeyCode)System.Enum.Parse(typeof(KeyCode), PlayerPrefs.GetString($"Player{playerID}_MoveLeft"));
            controls.moveRight = (KeyCode)System.Enum.Parse(typeof(KeyCode), PlayerPrefs.GetString($"Player{playerID}_MoveRight"));
            controls.fireNormal = (KeyCode)System.Enum.Parse(typeof(KeyCode), PlayerPrefs.GetString($"Player{playerID}_FireNormal"));
            controls.fireSpecial = (KeyCode)System.Enum.Parse(typeof(KeyCode), PlayerPrefs.GetString($"Player{playerID}_FireSpecial"));
        }
        else
        {
            SetDefaultControls();
        }
    }

    private void SetDefaultControls()
    {
        if (playerID == 1)
        {
            controls.moveUp = KeyCode.UpArrow;
            controls.moveDown = KeyCode.DownArrow;
            controls.moveLeft = KeyCode.LeftArrow;
            controls.moveRight = KeyCode.RightArrow;
            controls.fireNormal = KeyCode.Alpha1;
            controls.fireSpecial = KeyCode.Alpha2;
        }
        else if (playerID == 2)
        {
            controls.moveUp = KeyCode.Z;
            controls.moveDown = KeyCode.S;
            controls.moveLeft = KeyCode.Q;
            controls.moveRight = KeyCode.D;
            controls.fireNormal = KeyCode.E;
            controls.fireSpecial = KeyCode.A;
        }
    }

    public void SaveControls()
    {
        PlayerPrefs.SetString($"Player{playerID}_MoveUp", controls.moveUp.ToString());
        PlayerPrefs.SetString($"Player{playerID}_MoveDown", controls.moveDown.ToString());
        PlayerPrefs.SetString($"Player{playerID}_MoveLeft", controls.moveLeft.ToString());
        PlayerPrefs.SetString($"Player{playerID}_MoveRight", controls.moveRight.ToString());
        PlayerPrefs.SetString($"Player{playerID}_FireNormal", controls.fireNormal.ToString());
        PlayerPrefs.SetString($"Player{playerID}_FireSpecial", controls.fireSpecial.ToString());
        PlayerPrefs.Save();
    }

    private void HandleMovement()
    {
        Vector3 moveDirection = Vector3.zero;

        if (Input.GetKey(controls.moveUp)) moveDirection += Vector3.up;
        if (Input.GetKey(controls.moveDown)) moveDirection += Vector3.down;
        if (Input.GetKey(controls.moveLeft)) moveDirection += Vector3.left;
        if (Input.GetKey(controls.moveRight)) moveDirection += Vector3.right;

        transform.Translate(moveDirection.normalized * speed * Time.deltaTime);
    }

    private void HandleShooting()
    {
        if (Input.GetKeyDown(controls.fireNormal) && Time.time >= nextFireTime)
        {
            Shoot();
            nextFireTime = Time.time + 1f / fireRate;
        }
        else if (Input.GetKeyDown(controls.fireSpecial))
        {
            SpecialAttack();
        }
    }

    private void Shoot()
    {
        GameObject projectile = Instantiate(projectilePrefab, firePoint.position, firePoint.rotation);
        Rigidbody2D rb = projectile.GetComponent<Rigidbody2D>();
        rb.velocity = firePoint.up * projectileSpeed;
    }

    private void SpecialAttack()
    {
        Debug.Log("Special attack triggered!");
        // Implémente l'effet de l'attaque spéciale ici
    }
}


using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class MainMenu : MonoBehaviour
{
    public MenuManager menuManager;
    public ScoreManager scoreManager;
    public Text topScoresText;

    public void StartGame()
    {
        menuManager.LoadScene("GameScene");
    }

    public void OpenInstructions()
    {
        menuManager.LoadScene("InstructionsScene");
    }

    public void OpenOptions()
    {
        menuManager.LoadScene("OptionsScene");
    }

    public void ShowTopScores()
    {
        List<(string pseudo, int score)> topScores = scoreManager.GetTopScores(10);
        topScoresText.text = "Top Scores:\n";

        foreach (var score in topScores)
        {
            topScoresText.text += score.pseudo + ": " + score.score + "\n";
        }
    }
}


public class MainMenu : MonoBehaviour
{
    public MenuManager menuManager;

    public void StartGame()
    {
        menuManager.LoadScene("GameScene");
    }

    public void OpenInstructions()
    {
        menuManager.LoadScene("InstructionsScene");
    }

    public void OpenOptions()
    {
        menuManager.LoadScene("OptionsScene");
    }
}


using UnityEngine;
using UnityEngine.UI;

public class EndGameScreen : MonoBehaviour
{
    public MenuManager menuManager;
    public Text winnerText;
    public ScoreManager scoreManager;

    public void ShowWinner(string winner, float hpRemaining, int damageDealt, int damageReceived, float statDifference)
    {
        int score = ScoreManager.CalculateScore(hpRemaining, damageDealt, damageReceived, statDifference);
        scoreManager.SaveScore(System.Guid.NewGuid().ToString(), winner, score);
        winnerText.text = "Winner: " + winner + "\nScore: " + score;
    }

    public void ReturnToMenu()
    {
        menuManager.LoadScene("MainMenu");
    }
}


public class InstructionsScreen : MonoBehaviour
{
    public MenuManager menuManager;

    public void ReturnToMenu()
    {
        menuManager.LoadScene("MainMenu");
    }
}



using System;
using System.Collections.Generic;
using System.Data;
using UnityEngine;
using Mono.Data.Sqlite;

public class ScoreManager : MonoBehaviour
{
    private string connectionString = "URI=file:" + Application.persistentDataPath + "/GameScores.db"; // SQLite database path

    private void CreateDatabase()
    {
        if (!System.IO.File.Exists(Application.persistentDataPath + "/GameScores.db"))
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();
                string query = "CREATE TABLE IF NOT EXISTS score (uuid TEXT PRIMARY KEY, pseudo TEXT, number INTEGER)";
                using (var command = new SqliteCommand(query, connection))
                {
                    command.ExecuteNonQuery();
                }
                connection.Close();
            }
        }
    }

    // Use prepared statements to insert the score
    public void SaveScore(string uuid, string pseudo, int score)
    {
        using (var connection = new SqliteConnection(connectionString))
        {
            connection.Open();
            string query = "INSERT INTO score (uuid, pseudo, number) VALUES (@uuid, @pseudo, @score)";
            
            using (var command = new SqliteCommand(query, connection))
            {
                // Use parameterized queries (prepared statements)
                command.Parameters.AddWithValue("@uuid", uuid);
                command.Parameters.AddWithValue("@pseudo", pseudo);
                command.Parameters.AddWithValue("@score", score);
                
                command.ExecuteNonQuery();
            }
            connection.Close();
        }
    }

    // Use prepared statements to get the top N scores
    public List<(string pseudo, int score)> GetTopScores(int topN)
    {
        List<(string, int)> topScores = new List<(string, int)>();

        using (var connection = new SqliteConnection(connectionString))
        {
            connection.Open();
            string query = "SELECT pseudo, number FROM score ORDER BY number DESC LIMIT @topN";

            using (var command = new SqliteCommand(query, connection))
            {
                // Use parameterized queries (prepared statements)
                command.Parameters.AddWithValue("@topN", topN);
                
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        topScores.Add((reader.GetString(0), reader.GetInt32(1)));
                    }
                }
            }
            connection.Close();
        }

        return topScores;
    }

    // Method to calculate score (no changes needed here)
    public static int CalculateScore(float hpRemaining, int damageDealt, int damageReceived, float statDifference)
    {
        float handicap = 1 + (statDifference / 100);
        float score = ((hpRemaining + (Mathf.Abs((damageDealt * 4) - damageReceived) * 5)) * handicap) * 10;
        return Mathf.RoundToInt(score);
    }
}


using UnityEngine;
using UnityEngine.UI;
using System.Data;
using Mono.Data.Sqlite;  // Nécessaire pour SQLite

public class OptionsMenu : MonoBehaviour
{
    public MenuManager menuManager;

    // Champs InputField pour les contrôles des joueurs
    public InputField player1MoveUp, player1MoveDown, player1MoveLeft, player1MoveRight, player1FireNormal, player1FireSpecial;
    public InputField player2MoveUp, player2MoveDown, player2MoveLeft, player2MoveRight, player2FireNormal, player2FireSpecial;

    private string player1Uuid = "player1_uuid"; // Remplacer par un UUID unique pour le joueur 1
    private string player2Uuid = "player2_uuid"; // Remplacer par un UUID unique pour le joueur 2

    private void Start()
    {
        LoadControls();
    }

    // Sauvegarde les contrôles dans PlayerPrefs et dans la base de données
    public void SaveControls()
    {
        // Sauvegarde dans PlayerPrefs
        PlayerPrefs.SetString("Player1_MoveUp", player1MoveUp.text);
        PlayerPrefs.SetString("Player1_MoveDown", player1MoveDown.text);
        PlayerPrefs.SetString("Player1_MoveLeft", player1MoveLeft.text);
        PlayerPrefs.SetString("Player1_MoveRight", player1MoveRight.text);
        PlayerPrefs.SetString("Player1_FireNormal", player1FireNormal.text);
        PlayerPrefs.SetString("Player1_FireSpecial", player1FireSpecial.text);

        PlayerPrefs.SetString("Player2_MoveUp", player2MoveUp.text);
        PlayerPrefs.SetString("Player2_MoveDown", player2MoveDown.text);
        PlayerPrefs.SetString("Player2_MoveLeft", player2MoveLeft.text);
        PlayerPrefs.SetString("Player2_MoveRight", player2MoveRight.text);
        PlayerPrefs.SetString("Player2_FireNormal", player2FireNormal.text);
        PlayerPrefs.SetString("Player2_FireSpecial", player2FireSpecial.text);

        PlayerPrefs.Save();

        // Sauvegarde dans la base de données temporairement
        SaveControlsToDatabase();
    }

    // Sauvegarde les contrôles dans la base de données SQLite temporairement
    private void SaveControlsToDatabase()
    {
        // Récupère les valeurs des InputFields pour Player 1
        string p1MoveUp = player1MoveUp.text;
        string p1MoveDown = player1MoveDown.text;
        string p1MoveLeft = player1MoveLeft.text;
        string p1MoveRight = player1MoveRight.text;
        string p1FireNormal = player1FireNormal.text;
        string p1FireSpecial = player1FireSpecial.text;

        // Récupère les valeurs des InputFields pour Player 2
        string p2MoveUp = player2MoveUp.text;
        string p2MoveDown = player2MoveDown.text;
        string p2MoveLeft = player2MoveLeft.text;
        string p2MoveRight = player2MoveRight.text;
        string p2FireNormal = player2FireNormal.text;
        string p2FireSpecial = player2FireSpecial.text;

        string query = "INSERT OR REPLACE INTO changement (uuid, Cuuid, pseudo, rspd, spd, hp, atk, fr, pspd) VALUES " +
                       "(@uuid, @Cuuid, @pseudo, @rspd, @spd, @hp, @atk, @fr, @pspd)";

        using (var connection = new SqliteConnection("URI=file:" + Application.persistentDataPath + "/game.db"))
        {
            connection.Open();
            using (var command = new SqliteCommand(query, connection))
            {
                // Enregistrement des contrôles pour Player 1
                command.Parameters.AddWithValue("@uuid", System.Guid.NewGuid().ToString()); // Nouveau UUID temporaire
                command.Parameters.AddWithValue("@Cuuid", player1Uuid); // UUID du joueur 1
                command.Parameters.AddWithValue("@pseudo", "Player1"); // Nom du joueur 1
                command.Parameters.AddWithValue("@rspd", p1MoveUp); // Utilisation de MoveUp comme exemple pour la vitesse de rotation
                command.Parameters.AddWithValue("@spd", p1MoveDown); // Utilisation de MoveDown comme exemple pour la vitesse de déplacement
                command.Parameters.AddWithValue("@hp", p1MoveLeft); // Exemple pour les points de vie
                command.Parameters.AddWithValue("@atk", p1FireNormal); // Exemple pour la puissance de tir
                command.Parameters.AddWithValue("@fr", p1FireSpecial); // Exemple pour le délai de tir
                command.Parameters.AddWithValue("@pspd", p1MoveRight); // Exemple pour la vitesse des projectiles

                command.ExecuteNonQuery();
            }
        }

        using (var connection = new SqliteConnection("URI=file:" + Application.persistentDataPath + "/game.db"))
        {
            connection.Open();
            using (var command = new SqliteCommand(query, connection))
            {
                // Enregistrement des contrôles pour Player 2
                command.Parameters.AddWithValue("@uuid", System.Guid.NewGuid().ToString()); // Nouveau UUID temporaire
                command.Parameters.AddWithValue("@Cuuid", player2Uuid); // UUID du joueur 2
                command.Parameters.AddWithValue("@pseudo", "Player2"); // Nom du joueur 2
                command.Parameters.AddWithValue("@rspd", p2MoveUp); // Utilisation de MoveUp comme exemple pour la vitesse de rotation
                command.Parameters.AddWithValue("@spd", p2MoveDown); // Utilisation de MoveDown comme exemple pour la vitesse de déplacement
                command.Parameters.AddWithValue("@hp", p2MoveLeft); // Exemple pour les points de vie
                command.Parameters.AddWithValue("@atk", p2FireNormal); // Exemple pour la puissance de tir
                command.Parameters.AddWithValue("@fr", p2FireSpecial); // Exemple pour le délai de tir
                command.Parameters.AddWithValue("@pspd", p2MoveRight); // Exemple pour la vitesse des projectiles

                command.ExecuteNonQuery();
            }
        }
    }

    // Charge les contrôles depuis PlayerPrefs et la base de données
    private void LoadControls()
    {
        // Charger depuis PlayerPrefs
        player1MoveUp.text = PlayerPrefs.GetString("Player1_MoveUp", "UpArrow");
        player1MoveDown.text = PlayerPrefs.GetString("Player1_MoveDown", "DownArrow");
        player1MoveLeft.text = PlayerPrefs.GetString("Player1_MoveLeft", "LeftArrow");
        player1MoveRight.text = PlayerPrefs.GetString("Player1_MoveRight", "RightArrow");
        player1FireNormal.text = PlayerPrefs.GetString("Player1_FireNormal", "1");
        player1FireSpecial.text = PlayerPrefs.GetString("Player1_FireSpecial", "2");

        player2MoveUp.text = PlayerPrefs.GetString("Player2_MoveUp", "Z");
        player2MoveDown.text = PlayerPrefs.GetString("Player2_MoveDown", "S");
        player2MoveLeft.text = PlayerPrefs.GetString("Player2_MoveLeft", "Q");
        player2MoveRight.text = PlayerPrefs.GetString("Player2_MoveRight", "D");
        player2FireNormal.text = PlayerPrefs.GetString("Player2_FireNormal", "E");
        player2FireSpecial.text = PlayerPrefs.GetString("Player2_FireSpecial", "A");
    }

    // Supprime les modifications temporaires dans la base de données
    private void DeleteTemporaryChanges()
    {
        string deleteQuery = "DELETE FROM changement WHERE Cuuid = @Cuuid";

        using (var connection = new SqliteConnection("URI=file:" + Application.persistentDataPath + "/game.db"))
        {
            connection.Open();
            using (var command = new SqliteCommand(deleteQuery, connection))
            {
                command.Parameters.AddWithValue("@Cuuid", player1Uuid); // UUID du joueur 1
                command.ExecuteNonQuery();
            }
        }

        using (var connection = new SqliteConnection("URI=file:" + Application.persistentDataPath + "/game.db"))
        {
            connection.Open();
            using (var command = new SqliteCommand(deleteQuery, connection))
            {
                command.Parameters.AddWithValue("@Cuuid", player2Uuid); // UUID du joueur 2
                command.ExecuteNonQuery();
            }
        }
    }

    // Retour au menu principal
    public void ReturnToMenu()
    {
        DeleteTemporaryChanges(); // Supprimer les modifications avant de quitter
        menuManager.LoadScene("MainMenu");
    }
}





sudo apt-get install wiringpi


using UnityEngine;
using System.Collections;
using System.IO.Ports;  // Si vous avez besoin de gérer des périphériques série, par exemple un joystick série

public class InputManager : MonoBehaviour
{
    // Joystick Inputs (déjà gérés par Unity)
    private float player1JoystickHorizontal;
    private float player1JoystickVertical;
    private float player2JoystickHorizontal;
    private float player2JoystickVertical;

    // Définir les GPIO pins pour les boutons
    private int player1ButtonUp = 17;    // Exemple GPIO pin pour le bouton 1 (haut)
    private int player1ButtonDown = 18;  // Exemple GPIO pin pour le bouton 2 (bas)
    private int player2ButtonUp = 27;    // Exemple GPIO pin pour le bouton 3 (haut)
    private int player2ButtonDown = 22;  // Exemple GPIO pin pour le bouton 4 (bas)

    // Variables pour lire les états des boutons
    private bool player1ButtonUpPressed = false;
    private bool player1ButtonDownPressed = false;
    private bool player2ButtonUpPressed = false;
    private bool player2ButtonDownPressed = false;

    // Init
    void Start()
    {
        // Initialisation des GPIO pins pour les boutons
        InitializeGPIO();
    }

    // Update is called once per frame
    void Update()
    {
        // Récupération des données des joysticks (Unity gère déjà les joysticks USB automatiquement)
        player1JoystickHorizontal = Input.GetAxis("Horizontal_P1");
        player1JoystickVertical = Input.GetAxis("Vertical_P1");

        player2JoystickHorizontal = Input.GetAxis("Horizontal_P2");
        player2JoystickVertical = Input.GetAxis("Vertical_P2");

        // Récupération des états des boutons via les GPIO
        ReadButtonStates();

        // Détecter les actions des boutons et réagir
        HandleButtonPresses();
    }

    // Initialisation des GPIO pins pour les boutons
    void InitializeGPIO()
    {
        // Initialiser les GPIO pins pour les boutons en mode Input
        GPIOSetup(player1ButtonUp);
        GPIOSetup(player1ButtonDown);
        GPIOSetup(player2ButtonUp);
        GPIOSetup(player2ButtonDown);
    }

    // Configurer un GPIO pin en entrée avec pull-up
    void GPIOSetup(int pin)
    {
        string command = "gpio -g mode " + pin + " in";
        System.Diagnostics.Process.Start("/bin/bash", "-c \"" + command + "\"");
        command = "gpio -g mode " + pin + " up";  // Assurer un pull-up
        System.Diagnostics.Process.Start("/bin/bash", "-c \"" + command + "\"");
    }

    // Lire l'état des boutons via les GPIO
    void ReadButtonStates()
    {
        player1ButtonUpPressed = ReadButtonState(player1ButtonUp);
        player1ButtonDownPressed = ReadButtonState(player1ButtonDown);
        player2ButtonUpPressed = ReadButtonState(player2ButtonUp);
        player2ButtonDownPressed = ReadButtonState(player2ButtonDown);
    }

    // Lire l'état d'un bouton spécifique (vérifie si le bouton est pressé ou non)
    bool ReadButtonState(int pin)
    {
        string command = "gpio -g read " + pin;
        System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo()
        {
            FileName = "/bin/bash",
            Arguments = "-c \"" + command + "\"",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };
        System.Diagnostics.Process process = new System.Diagnostics.Process();
        process.StartInfo = psi;
        process.Start();
        string output = process.StandardOutput.ReadLine();
        process.WaitForExit();
        return output == "0";  // Si 0, le bouton est pressé, si 1, non pressé
    }

    // Gérer les pressions des boutons
    void HandleButtonPresses()
    {
        if (player1ButtonUpPressed)
        {
            Debug.Log("Player 1 Button Up Pressed");
            // Ajouter votre logique ici
        }

        if (player1ButtonDownPressed)
        {
            Debug.Log("Player 1 Button Down Pressed");
            // Ajouter votre logique ici
        }

        if (player2ButtonUpPressed)
        {
            Debug.Log("Player 2 Button Up Pressed");
            // Ajouter votre logique ici
        }

        if (player2ButtonDownPressed)
        {
            Debug.Log("Player 2 Button Down Pressed");
            // Ajouter votre logique ici
        }
    }
}
